/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!***************************!*\
  !*** ./src/background.ts ***!
  \***************************/
// set rules for pages to act upon
const targetPagesRule = {
    conditions: [
        new chrome.declarativeContent.PageStateMatcher({
            pageUrl: { hostContains: 'crunchyroll.com' }
        }),
        new chrome.declarativeContent.PageStateMatcher({
            pageUrl: { hostContains: 'netflix.com' }
        }),
        new chrome.declarativeContent.PageStateMatcher({
            pageUrl: { hostContains: 'hulu.com' }
        })
    ],
    actions: [new chrome.declarativeContent.ShowPageAction()]
};
chrome.runtime.onInstalled.addListener(function () {
    chrome.declarativeContent.onPageChanged.removeRules(undefined, function () {
        chrome.declarativeContent.onPageChanged.addRules([targetPagesRule]);
    });
});
// entire login function must be inside this file because service workers cannot import
// modules until Chrome 93 (allegedly)
// see https://stackoverflow.com/questions/66114920/service-worker-registration-failed-chrome-extension
chrome.runtime.onMessage.addListener((message, _sender, sendResponse) => {
    if (message == 'do-login') {
        const loginLink = 'https://anilist.co/api/v2/oauth/authorize?client_id=4552&response_type=token';
        chrome.identity.launchWebAuthFlow({ url: loginLink, interactive: true }, function (responseUrl) {
            // https://regex101.com/r/jDz0sC/1
            const accessTokenRegEx = /access_token=(.+?)(&|$)/;
            const tokenTypeRegEx = /token_type=(.+?)(&|$)/;
            const expiresInRegEx = /expires_in=(.+?)(&|$)/;
            const accessToken = responseUrl.match(accessTokenRegEx)[1]; // first captured group
            const tokenType = responseUrl.match(tokenTypeRegEx)[1];
            const expiresIn = responseUrl.match(expiresInRegEx)[1];
            if (!accessToken) {
                console.log("Login error.");
            }
            else {
                chrome.storage.sync.set({
                    accessToken: accessToken,
                    tokenType: tokenType,
                    expiresIn: expiresIn
                });
                const options = {
                    type: 'basic',
                    title: 'Anilist',
                    message: 'You have successfully logged into Anilist.',
                    iconUrl: './images/icon128.png'
                };
                chrome.notifications.create(null, options);
                sendResponse({ accessToken: accessToken });
            }
        });
        return true; // needed for async message response; see https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2dyb3VuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9iYWNrZ3JvdW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGtDQUFrQztBQUNsQyxNQUFNLGVBQWUsR0FBRztJQUN0QixVQUFVLEVBQUU7UUFDVixJQUFJLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQztZQUM3QyxPQUFPLEVBQUUsRUFBRSxZQUFZLEVBQUUsaUJBQWlCLEVBQUU7U0FDN0MsQ0FBQztRQUNGLElBQUksTUFBTSxDQUFDLGtCQUFrQixDQUFDLGdCQUFnQixDQUFDO1lBQzdDLE9BQU8sRUFBRSxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUU7U0FDekMsQ0FBQztRQUNGLElBQUksTUFBTSxDQUFDLGtCQUFrQixDQUFDLGdCQUFnQixDQUFDO1lBQzdDLE9BQU8sRUFBRSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUU7U0FDdEMsQ0FBQztLQUNIO0lBQ0QsT0FBTyxFQUFFLENBQUMsSUFBSSxNQUFNLENBQUMsa0JBQWtCLENBQUMsY0FBYyxFQUFFLENBQUM7Q0FDMUQsQ0FBQTtBQUNELE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQztJQUNyQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUU7UUFDN0QsTUFBTSxDQUFDLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFBO0lBQ3JFLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUE7QUFFRix1RkFBdUY7QUFDdkYsc0NBQXNDO0FBQ3RDLHVHQUF1RztBQUN2RyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFO0lBQ3RFLElBQUksT0FBTyxJQUFJLFVBQVUsRUFBRTtRQUN6QixNQUFNLFNBQVMsR0FBRyw4RUFBOEUsQ0FBQTtRQUNoRyxNQUFNLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUMvQixFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxFQUNyQyxVQUFVLFdBQVc7WUFDbkIsa0NBQWtDO1lBQ2xDLE1BQU0sZ0JBQWdCLEdBQUcseUJBQXlCLENBQUE7WUFDbEQsTUFBTSxjQUFjLEdBQUcsdUJBQXVCLENBQUE7WUFDOUMsTUFBTSxjQUFjLEdBQUcsdUJBQXVCLENBQUE7WUFFOUMsTUFBTSxXQUFXLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsdUJBQXVCO1lBQ2xGLE1BQU0sU0FBUyxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDdEQsTUFBTSxTQUFTLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUV0RCxJQUFJLENBQUMsV0FBVyxFQUFFO2dCQUNoQixPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFBO2FBQzVCO2lCQUFNO2dCQUNMLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztvQkFDdEIsV0FBVyxFQUFFLFdBQVc7b0JBQ3hCLFNBQVMsRUFBRSxTQUFTO29CQUNwQixTQUFTLEVBQUUsU0FBUztpQkFDckIsQ0FBQyxDQUFBO2dCQUNGLE1BQU0sT0FBTyxHQUFHO29CQUNaLElBQUksRUFBRSxPQUFPO29CQUNiLEtBQUssRUFBRSxTQUFTO29CQUNoQixPQUFPLEVBQUUsNENBQTRDO29CQUNyRCxPQUFPLEVBQUMsc0JBQXNCO2lCQUNqQyxDQUFDO2dCQUNGLE1BQU0sQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDM0MsWUFBWSxDQUFDLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUE7YUFDM0M7UUFDSCxDQUFDLENBQ0YsQ0FBQTtRQUNELE9BQU8sSUFBSSxDQUFBLENBQUMsc0lBQXNJO0tBQ25KO0FBQ0gsQ0FBQyxDQUFDLENBQUEifQ==
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmlsaXN0LXVwZGF0ZS8uL3NyYy9iYWNrZ3JvdW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEIsU0FBUztBQUNUO0FBQ0Esc0JBQXNCO0FBQ3RCLFNBQVM7QUFDVDtBQUNBLHNCQUFzQjtBQUN0QixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsb0NBQW9DO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUVBQXVFO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLDJCQUEyQjtBQUN6RDtBQUNBLFNBQVM7QUFDVCxvQkFBb0Isc0NBQXNDO0FBQzFEO0FBQ0EsQ0FBQztBQUNELDJDQUEyQyxtL0UiLCJmaWxlIjoiLi9hcHAvYmFja2dyb3VuZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHNldCBydWxlcyBmb3IgcGFnZXMgdG8gYWN0IHVwb25cclxuY29uc3QgdGFyZ2V0UGFnZXNSdWxlID0ge1xyXG4gICAgY29uZGl0aW9uczogW1xyXG4gICAgICAgIG5ldyBjaHJvbWUuZGVjbGFyYXRpdmVDb250ZW50LlBhZ2VTdGF0ZU1hdGNoZXIoe1xyXG4gICAgICAgICAgICBwYWdlVXJsOiB7IGhvc3RDb250YWluczogJ2NydW5jaHlyb2xsLmNvbScgfVxyXG4gICAgICAgIH0pLFxyXG4gICAgICAgIG5ldyBjaHJvbWUuZGVjbGFyYXRpdmVDb250ZW50LlBhZ2VTdGF0ZU1hdGNoZXIoe1xyXG4gICAgICAgICAgICBwYWdlVXJsOiB7IGhvc3RDb250YWluczogJ25ldGZsaXguY29tJyB9XHJcbiAgICAgICAgfSksXHJcbiAgICAgICAgbmV3IGNocm9tZS5kZWNsYXJhdGl2ZUNvbnRlbnQuUGFnZVN0YXRlTWF0Y2hlcih7XHJcbiAgICAgICAgICAgIHBhZ2VVcmw6IHsgaG9zdENvbnRhaW5zOiAnaHVsdS5jb20nIH1cclxuICAgICAgICB9KVxyXG4gICAgXSxcclxuICAgIGFjdGlvbnM6IFtuZXcgY2hyb21lLmRlY2xhcmF0aXZlQ29udGVudC5TaG93UGFnZUFjdGlvbigpXVxyXG59O1xyXG5jaHJvbWUucnVudGltZS5vbkluc3RhbGxlZC5hZGRMaXN0ZW5lcihmdW5jdGlvbiAoKSB7XHJcbiAgICBjaHJvbWUuZGVjbGFyYXRpdmVDb250ZW50Lm9uUGFnZUNoYW5nZWQucmVtb3ZlUnVsZXModW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY2hyb21lLmRlY2xhcmF0aXZlQ29udGVudC5vblBhZ2VDaGFuZ2VkLmFkZFJ1bGVzKFt0YXJnZXRQYWdlc1J1bGVdKTtcclxuICAgIH0pO1xyXG59KTtcclxuLy8gZW50aXJlIGxvZ2luIGZ1bmN0aW9uIG11c3QgYmUgaW5zaWRlIHRoaXMgZmlsZSBiZWNhdXNlIHNlcnZpY2Ugd29ya2VycyBjYW5ub3QgaW1wb3J0XHJcbi8vIG1vZHVsZXMgdW50aWwgQ2hyb21lIDkzIChhbGxlZ2VkbHkpXHJcbi8vIHNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82NjExNDkyMC9zZXJ2aWNlLXdvcmtlci1yZWdpc3RyYXRpb24tZmFpbGVkLWNocm9tZS1leHRlbnNpb25cclxuY2hyb21lLnJ1bnRpbWUub25NZXNzYWdlLmFkZExpc3RlbmVyKChtZXNzYWdlLCBfc2VuZGVyLCBzZW5kUmVzcG9uc2UpID0+IHtcclxuICAgIGlmIChtZXNzYWdlID09ICdkby1sb2dpbicpIHtcclxuICAgICAgICBjb25zdCBsb2dpbkxpbmsgPSAnaHR0cHM6Ly9hbmlsaXN0LmNvL2FwaS92Mi9vYXV0aC9hdXRob3JpemU/Y2xpZW50X2lkPTQ1NTImcmVzcG9uc2VfdHlwZT10b2tlbic7XHJcbiAgICAgICAgY2hyb21lLmlkZW50aXR5LmxhdW5jaFdlYkF1dGhGbG93KHsgdXJsOiBsb2dpbkxpbmssIGludGVyYWN0aXZlOiB0cnVlIH0sIGZ1bmN0aW9uIChyZXNwb25zZVVybCkge1xyXG4gICAgICAgICAgICAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL2pEejBzQy8xXHJcbiAgICAgICAgICAgIGNvbnN0IGFjY2Vzc1Rva2VuUmVnRXggPSAvYWNjZXNzX3Rva2VuPSguKz8pKCZ8JCkvO1xyXG4gICAgICAgICAgICBjb25zdCB0b2tlblR5cGVSZWdFeCA9IC90b2tlbl90eXBlPSguKz8pKCZ8JCkvO1xyXG4gICAgICAgICAgICBjb25zdCBleHBpcmVzSW5SZWdFeCA9IC9leHBpcmVzX2luPSguKz8pKCZ8JCkvO1xyXG4gICAgICAgICAgICBjb25zdCBhY2Nlc3NUb2tlbiA9IHJlc3BvbnNlVXJsLm1hdGNoKGFjY2Vzc1Rva2VuUmVnRXgpWzFdOyAvLyBmaXJzdCBjYXB0dXJlZCBncm91cFxyXG4gICAgICAgICAgICBjb25zdCB0b2tlblR5cGUgPSByZXNwb25zZVVybC5tYXRjaCh0b2tlblR5cGVSZWdFeClbMV07XHJcbiAgICAgICAgICAgIGNvbnN0IGV4cGlyZXNJbiA9IHJlc3BvbnNlVXJsLm1hdGNoKGV4cGlyZXNJblJlZ0V4KVsxXTtcclxuICAgICAgICAgICAgaWYgKCFhY2Nlc3NUb2tlbikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJMb2dpbiBlcnJvci5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLnNldCh7XHJcbiAgICAgICAgICAgICAgICAgICAgYWNjZXNzVG9rZW46IGFjY2Vzc1Rva2VuLFxyXG4gICAgICAgICAgICAgICAgICAgIHRva2VuVHlwZTogdG9rZW5UeXBlLFxyXG4gICAgICAgICAgICAgICAgICAgIGV4cGlyZXNJbjogZXhwaXJlc0luXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Jhc2ljJyxcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0FuaWxpc3QnLFxyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdZb3UgaGF2ZSBzdWNjZXNzZnVsbHkgbG9nZ2VkIGludG8gQW5pbGlzdC4nLFxyXG4gICAgICAgICAgICAgICAgICAgIGljb25Vcmw6ICcuL2ltYWdlcy9pY29uMTI4LnBuZydcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBjaHJvbWUubm90aWZpY2F0aW9ucy5jcmVhdGUobnVsbCwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICBzZW5kUmVzcG9uc2UoeyBhY2Nlc3NUb2tlbjogYWNjZXNzVG9rZW4gfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gbmVlZGVkIGZvciBhc3luYyBtZXNzYWdlIHJlc3BvbnNlOyBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Nb3ppbGxhL0FkZC1vbnMvV2ViRXh0ZW5zaW9ucy9BUEkvcnVudGltZS9vbk1lc3NhZ2VcclxuICAgIH1cclxufSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVltRmphMmR5YjNWdVpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlpWVdOclozSnZkVzVrTG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMR3REUVVGclF6dEJRVU5zUXl4TlFVRk5MR1ZCUVdVc1IwRkJSenRKUVVOMFFpeFZRVUZWTEVWQlFVVTdVVUZEVml4SlFVRkpMRTFCUVUwc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4blFrRkJaMElzUTBGQlF6dFpRVU0zUXl4UFFVRlBMRVZCUVVVc1JVRkJSU3haUVVGWkxFVkJRVVVzYVVKQlFXbENMRVZCUVVVN1UwRkROME1zUTBGQlF6dFJRVU5HTEVsQlFVa3NUVUZCVFN4RFFVRkRMR3RDUVVGclFpeERRVUZETEdkQ1FVRm5RaXhEUVVGRE8xbEJRemRETEU5QlFVOHNSVUZCUlN4RlFVRkZMRmxCUVZrc1JVRkJSU3hoUVVGaExFVkJRVVU3VTBGRGVrTXNRMEZCUXp0UlFVTkdMRWxCUVVrc1RVRkJUU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMR2RDUVVGblFpeERRVUZETzFsQlF6ZERMRTlCUVU4c1JVRkJSU3hGUVVGRkxGbEJRVmtzUlVGQlJTeFZRVUZWTEVWQlFVVTdVMEZEZEVNc1EwRkJRenRMUVVOSU8wbEJRMFFzVDBGQlR5eEZRVUZGTEVOQlFVTXNTVUZCU1N4TlFVRk5MRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNZMEZCWXl4RlFVRkZMRU5CUVVNN1EwRkRNVVFzUTBGQlFUdEJRVU5FTEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1YwRkJWeXhEUVVGRExGZEJRVmNzUTBGQlF6dEpRVU55UXl4TlFVRk5MRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNZVUZCWVN4RFFVRkRMRmRCUVZjc1EwRkJReXhUUVVGVExFVkJRVVU3VVVGRE4wUXNUVUZCVFN4RFFVRkRMR3RDUVVGclFpeERRVUZETEdGQlFXRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF5eERRVUZCTzBsQlEzSkZMRU5CUVVNc1EwRkJReXhEUVVGQk8wRkJRMG9zUTBGQlF5eERRVUZETEVOQlFVRTdRVUZGUml4MVJrRkJkVVk3UVVGRGRrWXNjME5CUVhORE8wRkJRM1JETEhWSFFVRjFSenRCUVVOMlJ5eE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRk5CUVZNc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF5eFBRVUZQTEVWQlFVVXNUMEZCVHl4RlFVRkZMRmxCUVZrc1JVRkJSU3hGUVVGRk8wbEJRM1JGTEVsQlFVa3NUMEZCVHl4SlFVRkpMRlZCUVZVc1JVRkJSVHRSUVVONlFpeE5RVUZOTEZOQlFWTXNSMEZCUnl3NFJVRkJPRVVzUTBGQlFUdFJRVU5vUnl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExHbENRVUZwUWl4RFFVTXZRaXhGUVVGRkxFZEJRVWNzUlVGQlJTeFRRVUZUTEVWQlFVVXNWMEZCVnl4RlFVRkZMRWxCUVVrc1JVRkJSU3hGUVVOeVF5eFZRVUZWTEZkQlFWYzdXVUZEYmtJc2EwTkJRV3RETzFsQlEyeERMRTFCUVUwc1owSkJRV2RDTEVkQlFVY3NlVUpCUVhsQ0xFTkJRVUU3V1VGRGJFUXNUVUZCVFN4alFVRmpMRWRCUVVjc2RVSkJRWFZDTEVOQlFVRTdXVUZET1VNc1RVRkJUU3hqUVVGakxFZEJRVWNzZFVKQlFYVkNMRU5CUVVFN1dVRkZPVU1zVFVGQlRTeFhRVUZYTEVkQlFVY3NWMEZCVnl4RFFVRkRMRXRCUVVzc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGQkxFTkJRVU1zZFVKQlFYVkNPMWxCUTJ4R0xFMUJRVTBzVTBGQlV5eEhRVUZITEZkQlFWY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVRTdXVUZEZEVRc1RVRkJUU3hUUVVGVExFZEJRVWNzVjBGQlZ5eERRVUZETEV0QlFVc3NRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlFUdFpRVVYwUkN4SlFVRkpMRU5CUVVNc1YwRkJWeXhGUVVGRk8yZENRVU5vUWl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExHTkJRV01zUTBGQlF5eERRVUZCTzJGQlF6VkNPMmxDUVVGTk8yZENRVU5NTEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF6dHZRa0ZEZEVJc1YwRkJWeXhGUVVGRkxGZEJRVmM3YjBKQlEzaENMRk5CUVZNc1JVRkJSU3hUUVVGVE8yOUNRVU53UWl4VFFVRlRMRVZCUVVVc1UwRkJVenRwUWtGRGNrSXNRMEZCUXl4RFFVRkJPMmRDUVVOR0xFMUJRVTBzVDBGQlR5eEhRVUZITzI5Q1FVTmFMRWxCUVVrc1JVRkJSU3hQUVVGUE8yOUNRVU5pTEV0QlFVc3NSVUZCUlN4VFFVRlRPMjlDUVVOb1FpeFBRVUZQTEVWQlFVVXNORU5CUVRSRE8yOUNRVU55UkN4UFFVRlBMRVZCUVVNc2MwSkJRWE5DTzJsQ1FVTnFReXhEUVVGRE8yZENRVU5HTEUxQlFVMHNRMEZCUXl4aFFVRmhMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXp0blFrRkRNME1zV1VGQldTeERRVUZETEVWQlFVVXNWMEZCVnl4RlFVRkZMRmRCUVZjc1JVRkJSU3hEUVVGRExFTkJRVUU3WVVGRE0wTTdVVUZEU0N4RFFVRkRMRU5CUTBZc1EwRkJRVHRSUVVORUxFOUJRVThzU1VGQlNTeERRVUZCTEVOQlFVTXNjMGxCUVhOSk8wdEJRMjVLTzBGQlEwZ3NRMEZCUXl4RFFVRkRMRU5CUVVFaWZRPT0iXSwic291cmNlUm9vdCI6IiJ9